
natural_newline = _{"\r\n" | "\n"}
explicit_newline = _{";"}
new_line = _{natural_newline | explicit_newline}
line_terminator = _{new_line | EOI}


identifier = @{ "_"* ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_" | ".")* }
string = @{ "\"" ~ (("\\\"" | !"\"")  ~ ANY)* ~ "\"" }
float = @{ ("-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
integer = @{ ("-")? ~ ASCII_DIGIT+ }
boolean = @{ "true" | "false" }
member_access = { "." ~ identifier }
member_call = { "." ~ function_call }

EQ_OPS = { "==" | "!="  | ">=" | "<=" | ">" | "<"}
SUM_OPS = { "+" | "-" }
PROD_OPS = { "*" | "/" }

expr = {
    bare_expr |
    function_call
}
function_call = { identifier ~ "(" ~ expr* ~ ("," ~ expr)* ~ ")" }
bare_expr = { sum ~ ((EQ_OPS) ~ sum)* }
sum = { product ~ ((SUM_OPS) ~ product)* }
product = { term ~ ((PROD_OPS) ~ term)* }
term = {
    (string |
    float |
    integer |
    boolean |
    function_call |
    identifier |
    "(" ~ expr ~ ")" ) ~ (member_access | member_call)*
}

class_declaration = {"klase" ~ identifier ~ "{" ~ natural_newline* ~ identifier? ~ ("," ~ natural_newline* ~ identifier ~ natural_newline*)* ~ ","? ~ natural_newline* ~ "}"}

variable_assignment = {"deklara" ~ identifier ~ "=" ~ expr}
variable_reassignment = { identifier ~ "=" ~ expr}
function_call_statement = { function_call }
function_declaration = {"proseso" ~ identifier ~ "(" ~ identifier? ~ ("," ~ identifier)* ~ ","? ~ ")" ~ block}
conditional_if = {"kon" ~ expr ~ block }
conditional_else_if = {"kon" ~ "lain" ~ expr ~ block }
conditional_else = {"lain" ~ block }
conditional = { conditional_if ~ (conditional_else_if)* ~ (conditional_else)? }
while_loop = {"samtang" ~ expr ~ block }
break_kw = {"buwag"}
continue_kw = {"tiwas"}
return_kw = {"balik" ~ expr* ~ ("," ~ expr*)* ~ ","*}
COMMENT = { "//" ~ (!new_line ~ ANY)* }
MULTILINE_COMMENT = { "/*" ~ (!"/*" ~ ANY)* ~ "*/" }


block = { "{" ~ inner_statements ~ "}"}

inner_statement = _{
    (
        variable_assignment
        | function_call_statement
        | conditional
        | variable_reassignment
        | while_loop
        | break_kw
        | continue_kw
        | return_kw
        | COMMENT
        | MULTILINE_COMMENT
    )
    ~ new_line
}

inner_statements = _{ new_line* ~ inner_statement* ~ new_line*}

outer_statement = _{
    (new_line* ~ (
        inner_statement
        | function_declaration
        | class_declaration
        | COMMENT
        | MULTILINE_COMMENT
    ) ~ new_line*)
}


program = _{ SOI ~ outer_statement* }

WHITESPACE = _{ " " | "\t" }